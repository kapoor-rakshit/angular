1. MODULE.TS
--------------------
import { ActiveFacetsModule, AtMessageModule, FacetModule, GenericLinkModule, KeyboardFocusModule } from '@spartacus/storefront';
@NgModule({
  imports: [GenericLinkModule, ActiveFacetsModule, FacetModule, KeyboardFocusModule, AtMessageModule]
})

2. ROOT-FACET-COMP.HTML
---------------------------
<button #trigger class="dialog-trigger" (click)="launch()">
  <cx-icon [type]="iconTypes.FILTER"></cx-icon>
  {{ "productList.filterBy.label" | cxTranslate }}
</button>
<CUSTOM-active-facets></CUSTOM-active-facets>
<CUSTOM-facet-list
  *ngIf="isOpen$ | async"
  [isDialog]="hasTrigger"
  (closeList)="close()"
  [class.active]="isActive$ | async"
  [class.dialog]="hasTrigger"
  [orderHistoryFilters]="orderHistoryFilters"
></CUSTOM-facet-list>

3. ROOT-FACET-COMP.TS
---------------------------
import { Facet, FacetValue } from '@spartacus/core';
import { BreakpointService, ProductFacetNavigationComponent } from '@spartacus/storefront';
export class CUSTOM-FacetComponent extends ProductFacetNavigationComponent implements OnInit, OnDestroy {
  orderHistoryFilters!: Facet[];
  selectedFacets: FacetValue[] = [];
  destroy$ = new Subject();
  constructor(private prductFacetService: CUSTOM-FacetService, protected override breakpointService: BreakpointService) {
    super(breakpointService);
  }
  ngOnInit(): void {
    this.prductFacetService.selectedFacets$.pipe(takeUntil(this.destroy$)).subscribe((selectedFilters) => {
        this.selectedFacets = selectedFilters;
    });
  }
  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }
}

4. ROOT-FACET-COMP.SCSS
----------------------------
@import "bootstrap/scss/mixins";
@import "@spartacus/styles/scss/cxbase/mixins";
@import "@spartacus/styles/scss/components/product/list/_product-facet-navigation.scss";
:host {
  @extend %cx-product-facet-navigation;
  min-width: 0;
  // hides the filter button in desktop experience
  @include media-breakpoint-up(md) {
    button.dialog-trigger {
      display: none;
    }
  }
}

5. ACTIVE-FACET.COMP.HTML
-------------------------------
5.A. PLP active facets
------------------------
<ng-container *ngIf="facetList$ | async as facetList">
  <div class="active-facet-container" *ngIf="facetList.activeFacets && facetList.activeFacets.length > 0">
    <div class="active-filter-heading" id="cx-active-facets-groupName"
      *ngIf="facetList.activeFacets && facetList.activeFacets.length > 0">
      <div class="selected">
        {{ "productList.appliedFilter" | cxTranslate }}
      </div>
      <div class="clear-container">
        <i class="fa-solid fa-arrows-rotate"></i>
        <a role="button" routerLink="./" class="clear-link" [queryParams]="clearAllFilters(facetList.activeFacets)">{{
          "productList.clear" | cxTranslate }}
        </a>
      </div>
    </div>
    <div class="active-links">
      <a *ngFor="let facet of facetList?.activeFacets" routerLink="./" [queryParams]="getLinkParams(facet)"
        [cxFocus]="{ key: getFocusKey(facetList, facet) }" role="button"
        (keydown.space)="removeFilterWithSpacebar($event)" [attr.aria-label]="
          'productList.activeFilter'
            | cxTranslate : { filter: facet.facetValueName }
        ">
        <span>{{ facet.facetValueName }}</span>
        <i aria-hidden="true" class="fa-sharp fa-solid fa-xmark"></i>
      </a>
    </div>
  </div>
</ng-container>

5.B. GENERIC active facets
-------------------------------
<ng-container *ngIf="activeOrderFacets$ | async as facetList">
  <div class="active-facet-container" *ngIf="facetList && facetList.length > 0">
    <div class="active-filter-heading" id="cx-active-facets-groupName" *ngIf="facetList && facetList.length > 0">
      <div class="selected">
        {{ "productList.appliedFilter" | cxTranslate }}
      </div>
      <div class="clear-container">
        <i class="fa-solid fa-arrows-rotate"></i>
        <a role="button" routerLink="./" class="clear-link" (click)="clearOrderHistoryFilters()">{{ "productList.clear"
          | cxTranslate }}
        </a>
      </div>
    </div>
    <div class="active-links">
      <a *ngFor="let facet of facetList" routerLink="./" (click)="productFacetService.removeSelectedFacet(facet)"
        role="button" (keydown.space)="removeFilterWithSpacebar($event)" [attr.aria-label]="
          'productList.activeFilter' | cxTranslate : { filter: facet.name }
        ">
        <span>{{ facet.name }}</span>
        <cx-icon aria-hidden="true" [type]="closeIcon"></cx-icon>
      </a>
    </div>
  </div>
</ng-container>

6. ACTIVE-FACET.COMP.TS
-------------------------------
import { Breadcrumb } from '@spartacus/core';
import { ActiveFacetsComponent, FacetService } from '@spartacus/storefront';
export class CUSTOM-ActiveFacetsComponent extends ActiveFacetsComponent {
  /** Active facets which are applied to the product results. */
  override facetList$ = this.productFacetService.facetList$;
  activeOrderFacets$ = this.productFacetService.selectedFacets$;
  constructor(protected _facetService: FacetService, public productFacetService: CUSTOM-FacetService) {
    super(_facetService);
  }
  clearAllFilters(activeFacets: Breadcrumb[]) {
    let removeQuery = activeFacets[0].removeQuery?.query?.value;
    return this.facetService.getLinkParams(
      removeQuery?.split(':category')[0] ?? ''
    );
  }
  clearOrderHistoryFilters() {
    this.productFacetService.clearAllFacet();
  }
}

7. ACTIVE-FACET.COMP.SCSS
-------------------------------
@import 'bootstrap/scss/mixins';
@import '@spartacus/styles/scss/cxbase/mixins';
@import '@spartacus/styles/scss/components/product/list/_active-facets.scss';
:host {
  @extend %cx-active-facets;
}

8. FACET-LIST.COMP.HTML
-----------------------------
<!-- Desktop View -->
<div class="facet-desktop-container" *ngIf="!isMobile">
  <div class="filter-heading">{{ "productList.filter" | cxTranslate }}</div>
  <section
    class="inner"
    *ngIf="orderHistoryFilters as facets"
    [attr.aria-label]="'productFacetNavigation.filterBy.facet' | cxTranslate"
    [cxFocus]="isDialog ? dialogFocusConfig : {}"
    [tabindex]="-1"
    (esc)="close($event)"
    (click)="block($event)"
  >
    <!--
      Here we'd like to introduce configurable facet components,
      either by using specific configuration or generic sproutlets
  -->
    <CUSTOM-facet
      *ngFor="let facet of facets"
      #facetRef
      [facet]="facet"
      [facetList]="facets"
      [class.expanded]="isExpanded(facet) | async"
      [class.collapsed]="isCollapsed(facet) | async"
      componentId="orderHistoryFacet"
      role="group"
      attr.aria-label="{{'productFacetNavigation.ariaLabelItemsAvailable' | cxTranslate: {name: facet.name,count: facet?.values?.length}}}"
    ></CUSTOM-facet>
  </section>
</div>
<!-- Mobile View -->
<ng-container *ngIf="isMobile">
  <section
    class="inner facet-mobile-container"
    *ngIf="orderHistoryFilters as facets"
    [attr.aria-label]="'productFacetNavigation.filterBy.facet' | cxTranslate"
    [cxFocus]="isDialog ? dialogFocusConfig : {}"
    [tabindex]="-1"
    (esc)="close($event)"
    (click)="block($event)"
  >
    <div class="list-header">
      <button
        type="button"
        class="close"
        [attr.aria-label]="'common.close' | cxTranslate"
        (click)="close()"
      >
        <cx-icon aria-hidden="true" [type]="iconTypes.ARROW_LEFT"></cx-icon>
      </button>
      <h4>
        {{ "productList.filterBy.label" | cxTranslate }}
      </h4>
    </div>
    <CUSTOM-facet
      *ngFor="let facet of facets"
      #facetRef
      [facet]="facet"
      [facetList]="facets"
      [class.expanded]="isExpanded(facet) | async"
      [class.collapsed]="isCollapsed(facet) | async"
      componentId="orderHistoryFacet"
      role="group"
      attr.aria-label="{{'productFacetNavigation.ariaLabelItemsAvailable' | cxTranslate : {name: facet.name,count: facet?.values?.length}}}"
    ></CUSTOM-facet>
    <div class="list-footer">
      <a *ngIf="orderHistoryFilters" role="button" routerLink="./" class="footer-btn" (click)="clearOrderHistoryFilters(); close()">
       {{ "productList.clearFilter" | cxTranslate }}
      </a>
      <button (click)="close()">
        {{ "productList.showResults" | cxTranslate }}
      </button>
    </div>
  </section>
</ng-container>

9. FACET-LIST.COMP.TS
-----------------------------
import { Facet } from '@spartacus/core';
import { BREAKPOINT, BreakpointService, FacetList, FacetListComponent, FacetService } from '@spartacus/storefront';
export class CUSTOM-FilterListComponent extends FacetListComponent implements OnInit, OnDestroy {
  destroy$ = new Subject();
  isMobile!: boolean;
  facetList: FacetList | undefined;
  @Input() orderHistoryFilters!: Facet[];
  constructor(protected _facetService: FacetService,protected _elementRef: ElementRef,protected _renderer: Renderer2,private breakPointService: BreakpointService,
    private cd: ChangeDetectorRef,private prductFacetService: CUSTOM-FacetService) {
    super(_facetService, _elementRef, _renderer);
  }
  ngOnInit(): void {
    this.breakPointService.isDown(BREAKPOINT.sm).pipe(takeUntil(this.destroy$)).subscribe((isMobile) => {
        this.isMobile = isMobile;
        this.cd.markForCheck();
    });
  }
  override close(event?: boolean): void {
    this.renderer.removeClass(document.body, 'modal-open');
    this.closeList.emit(event);
    this.prductFacetService.dialogClosed.next(true);
  }
  clearOrderHistoryFilters() {
    this.prductFacetService.clearAllFacet();
  }
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
}

10. FACET-LIST.COMP.SCSS
------------------------------
@import 'bootstrap/scss/mixins';
@import '@spartacus/styles/scss/cxbase/mixins';
@import '@spartacus/styles/scss/_versioning.scss';
@import '@spartacus/styles/scss/components/product/list/_facet-list.scss';
:host {
  body.modal-open {
    overflow: hidden;
  }
  @extend %cx-dialog;
  @extend %cx-modal;
  @extend %cx-overlay;
  @extend %cx-facet-list;
}

11. CUSTOM-FacetService.TS
-------------------------------
import { FacetValue } from '@spartacus/core';
import { FacetList } from '@spartacus/storefront';
export class CUSTOM-FacetService {
  dialogClosed = new BehaviorSubject<boolean>(false);
  facetList$ = new BehaviorSubject<FacetList>({ facets: [] });
  selectedFacets: Array<FacetValue> = [];
  selectedFacets$ = new BehaviorSubject<FacetValue[]>([]);
  addselectedFacet(value: FacetValue) {
    this.selectedFacets.push(value);
    this.selectedFacets$.next(this.selectedFacets);
  }
  removeSelectedFacet(value: FacetValue) {
    this.selectedFacets = this.selectedFacets.filter(
      (facet) => value !== facet
    );
    this.selectedFacets$.next(this.selectedFacets);
  }
  clearAllFacet() {
    this.selectedFacets = [];
    this.selectedFacets$.next(this.selectedFacets);
  }
}
