Refer: https://github.com/angular/components/tree/main/src/google-maps

1. INSTALL
================
> npm install @angular/google-maps
  OR
> ng add @angular/google-maps


2. LOAD API with YOUR_API_KEY
===================================
NOTE: YOUR_API_KEY is a key secret generated from   https://developers.google.com/maps/gmp-get-started
      Ensure to whitelist the host on google console from where request will be made
<!doctype html>
<head>
  <script type='text/javascript'>function initMap() {}</script>
  <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&callback=initMap"></script>
  <script src="https://unpkg.com/@googlemaps/markerclustererplus/dist/index.min.js"></script>         /* for marker cluster */
</head>

IMPORTANT: Make sure to load scripts before initing <google-map> component.
This can be done via observable that will next(true) on `onload` event of JS.
addJS(
    scriptSRC: string, scriptID: string, refreshScript = false, insertToHead = true, elemRef?: ElementRef
  ): Observable<boolean> {
      return new Observable((observer) => {
          if (this.alreadyExists(scriptID)) {
            if (refreshScript) {
              this.removeElem(scriptID);
            } else {
              observer.next(true);
              observer.complete();
              return;
            }
          }

          const s = this.windowRef.document.createElement('script');
          if (s) {
            s.type = 'text/javascript';
            s.src = scriptSRC;
            s.id = scriptID;

            insertToHead ? this.windowRef?.document?.head?.appendChild(s) : elemRef?.nativeElement?.appendChild(s);

            s.onload = () => {
              observer.next(true);
              observer.complete();
            };

            s.onerror = () => {
              observer.error();
              observer.complete();
            };
          }
      });
}
alreadyExists(elemID: string): boolean {
    return this.windowRef?.document?.querySelector(`#${elemID}`) ? true : false;
}
removeElem(elemID: string): void {
    this.windowRef?.document?.querySelector(`#${elemID}`)?.remove();
}
removeElemList(selector: string): void {
    this.windowRef?.document?.querySelectorAll(selector)?.forEach((elem) => {
      elem.remove();
    });
}


3. MODULE.TS
================
import { GoogleMapsModule } from '@angular/google-maps';


4. COMP.TS
===================
declare global {
  interface Window {
    initMap?: () => void;
    google?: {
      maps?: any;
    };
  }
}
public mapOptions: google.maps.MapOptions = {};
public srcStore!: google.maps.LatLngLiteral;
public markerClusterStyle!: any[];
public readonly storeLabels = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
public showGoogleMaps: boolean = false;
@ViewChild(MapInfoWindow, { static: false }) gMapInfoWindow!: MapInfoWindow;
ngOnInit() {
    this.windowUtils.addJS(
      scriptSRC, scriptID, refreshScript, insertToHead, elemRef
    ).pipe(takeUntil(this.destroyed$)).subscribe((data) => {
        if(data) {
            this.showGoogleMaps = true;
            this.cdRef.markForCheck();
        }
    });
}

this.mapOptions = {
   mapTypeId: 'roadmap',
   streetViewControl: false,
   mapTypeControl: false,
   fullscreenControlOptions: {
     position: google.maps.ControlPosition.LEFT_TOP,
   },
   zoom: 15,
   minZoom: 3,
};

this.srcStore = { 
  lat: data?.searchPageData?.sourceLatitude ?? 0,
  lng: data?.searchPageData?.sourceLongitude ?? 0
};

this.markerClusterStyle = [{
    url: 'assets/images/ff-chair.png',                     /* URL for image to be shown on cluster */
    height: 46,
    width: 46,
    className: 'markerCluster',
    fontWeight: 'bold',
    textSize: 14,
    textColor: '#FFF',
    fontFamily: 'Fantastic',
}];

showMarkerInfo(evt: google.maps.MapMouseEvent, marker: MapMarker, data: any) {
    this.srcStore = { lat: evt.latLng?.lat() ?? 0, lng: evt.latLng?.lng() ?? 0 };
    this.gMapInfoWindow.open(marker);
}

ngOnDestroy(): void {
    this.destroyed$.next();
    this.destroyed$.complete();
    this.windowUtils.removeElem(this.MARKER_CLUSTER_SCRIPT_ID);
    this.windowUtils.removeElem(this.GOOGLE_MAPS_CALLBACK_ID);
    this.windowUtils.removeElemList("[src*='maps.googleapis.com']");
    if (this.windowRef?.nativeWindow?.window?.google?.maps) {
      delete this.windowRef.nativeWindow?.window?.google?.maps;
    }
}


5. COMP.HTML
==================
<div class="map-container">
<ng-container *ngIf="showGoogleMaps">
    <google-map
       height="100%"
       width="100%"
       [options]="mapOptions"
       [center]="srcStore"
    >
       <map-marker-clusterer [styles]="markerClusterStyle">
              <map-marker
                #markerElem="mapMarker"
                *ngFor="let store of storeList; let ind = index"
                [position]="{ lat: store.geoPoint.latitude, lng: store.geoPoint.longitude }"
                [label]="{ color: 'white', text: storeLabels.charAt(ind), fontWeight: 'bold' }"
                [title]="store.name"
                icon="assets/images/store-marker.png"
                (mapClick)="showMarkerInfo($event, markerElem, store)"
              >
              </map-marker>
       </map-marker-clusterer>
       <map-info-window>
              <div class="markerStoreInfo">
                TEXT TO BE SHOWN ON INFO WINDOW, WHEN CLICKED ON MARKER
              </div>
       </map-info-window>        
    </google-map>
</ng-container>
</div>


6. COMP.SCSS
====================================
$googleMapHeightMobile: 400px;
$googleMapHeightDesktop: 600px;
.map-container {
  height: $googleMapHeightMobile;
  @include media-breakpoint-up(md) {
    height: $googleMapHeightDesktop;
  }
}
::ng-deep {
  .markerCluster {
    background-color: var(--red);
    border-radius: 50%;
    border: 1px solid var(--white);
    div {
      top: 25%;
    }
  }
}
