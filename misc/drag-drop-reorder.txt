Angular material's drag-and-drop interfaces, with support for free dragging, sorting within a list, transferring items between lists,
custom drag handles, previews, placeholders, horizontal lists dragging, locking along an axis.

REFERENCE : https://material.angular.io/cdk/drag-drop/overview
==============================================================================================================================================

0. add Angular Material
-----------------------------
> ng add @angular/material                        (MULTI-REPO)
> ng add @angular/material --project <my-app>     (MONO-REPO)


1. module.TS
---------------
import {DragDropModule} from '@angular/cdk/drag-drop';

@NgModule({
  imports: [DragDropModule]
})
export class AppModule { }


2. component.HTML
------------------
<!-- 2.a. Free Dragging | cdkDrag -->
<div class="example-box" cdkDrag>
  Drag me around
</div>

<!-- 2.b. Restricting movement within an element | cdkDragBoundary="<ELEMENT_SELECTOR>" or "body"(restrict on document) -->
<div class="example-boundary">
  <div class="example-box" cdkDragBoundary=".example-boundary" cdkDrag>
    I can only be dragged within the dotted container
  </div>
</div>

<!-- 2.c. Restricting movement along an axis | cdkDragLockAxis="y" or "x" -->
<div class="example-box" cdkDragLockAxis="x" cdkDrag>
  Drag me around
</div>

<!-- 2.d. Reordering lists | cdkDropList | cdkDropListDropped -->
<div cdkDropList class="example-list" (cdkDropListDropped)="drop($event)">
  <div class="example-box" *ngFor="let movie of movies" cdkDragBoundary=".example-list" cdkDrag>{{movie}}</div>
</div>

<!-- 2.e. Transferring items between lists | cdkDropListGroup | cdkDropListData -->
<div class="listContainer" cdkDropListGroup>
  <!-- All lists in here will be connected. -->
  <div cdkDropList class="example-list" [cdkDropListData]="movies_1" (cdkDropListDropped)="dropTransferReorder($event)">
    <div class="example-box" *ngFor="let movie of movies_1" cdkDragBoundary=".listContainer" cdkDrag>{{movie}}</div>
  </div>
  <div cdkDropList class="example-list" [cdkDropListData]="movies_2" (cdkDropListDropped)="dropTransferReorder($event)">
    <div class="example-box" *ngFor="let movie of movies_2" cdkDragBoundary=".listContainer" cdkDrag>{{movie}}</div>
  </div>
</div>

<!-- 2.f. Customizing the drag area of item using a handle | cdkDragHandle -->
<div class="example-box" cdkDrag>
  I can only be dragged using the handle
  <div class="example-handle" cdkDragHandle>hold & drag</div>
</div>

<!-- 2.g. Controlling items can/cannot be dropped into container from outside only | cdkDropListEnterPredicate | cdkDropListData | cdkDragData -->
<div class="listContainer" cdkDropListGroup>
  <!-- All lists in here will be connected. -->
  <div cdkDropList class="example-list" [cdkDropListEnterPredicate]="allowPredicate" [cdkDropListData]="movies_1" (cdkDropListDropped)="dropTransferReorder($event)">
    <div class="example-box" [cdkDragData]="movie" *ngFor="let movie of movies_1" cdkDragBoundary=".listContainer" cdkDrag>{{movie}}</div>
  </div>
  <div cdkDropList class="example-list" [cdkDropListEnterPredicate]="noReturnPredicate" [cdkDropListData]="movies_2" (cdkDropListDropped)="dropTransferReorder($event)">
    <div class="example-box" [cdkDragData]="movie" *ngFor="let movie of movies_2" cdkDragBoundary=".listContainer" cdkDrag>{{movie}}</div>
  </div>
</div>

<!-- 2.h. Controlling item can/cannot be dropped into particular index from outside & within | cdkDropListSortPredicate | cdkDropListData | cdkDragData -->
<div cdkDropList class="example-list" [cdkDropListData]="numbers" (cdkDropListDropped)="drop($event)" [cdkDropListSortPredicate]="sortPredicate">
  <div class="example-box" *ngFor="let number of numbers" [cdkDragData]="number" cdkDrag>{{number}}</div>
</div>

<!-- 2.i. Disabled dropping/sorting all within only | cdkDropListSortingDisabled -->
<div cdkDropList class="example-list" [cdkDropListData]="movies_1" (cdkDropListDropped)="dropTransferReorder($event)" cdkDropListSortingDisabled>
  <div class="example-box" *ngFor="let movie of movies_1" [cdkDragData]="movie" cdkDrag>{{movie}}</div>
</div>


3. component.TS
------------------
/* Required import for reordering */
import {CdkDragDrop, moveItemInArray, transferArrayItem, CdkDrag} from '@angular/cdk/drag-drop';

@Component({})
export class CdkDragDropComponent {
  movies = [];
  
  /* Reorder items in a list and update data model accordingly */
  drop(event: CdkDragDrop<string[]>) {
    moveItemInArray(this.movies, event.previousIndex, event.currentIndex);
  }
  
  /* Transfer items between lists and update data model accordingly */
  dropTransferReorder(event: CdkDragDrop<string[]>) {
    if (event.previousContainer === event.container) {
      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);
    } else {
      transferArrayItem(event.previousContainer.data, event.container.data, event.previousIndex, event.currentIndex);
    }
  }
  
  /* Predicate function that allows only certain item to be dropped into a list. */
  allowPredicate(item: CdkDrag<any>) {
    return item.data % 2 === 0;
  }
  /* Predicate function that doesn't allow any item to be dropped into a list. */
  noReturnPredicate() {
    return false;
  }
  
  /* Predicate function that only allows items to be dropped at certain indices */
  sortPredicate(index: number, item: CdkDrag<any>) {
    return (index + 1) % 2 === item.data % 2;
  }
}


4. component.CSS
------------------
.example-box {
    padding: 10px;
    border: solid 1px #ccc;
    color: rgba(0, 0, 0, 0.87);
    cursor: move;
    text-align: center;
    background: #fff;
    border-radius: 4px;
    position: relative;
    z-index: 1;
    transition: box-shadow 200ms cubic-bezier(0, 0, 0.2, 1);
    box-shadow: 0 3px 1px -2px rgba(0, 0, 0, 0.2),
                0 2px 2px 0 rgba(0, 0, 0, 0.14),
                0 1px 5px 0 rgba(0, 0, 0, 0.12);
}

.example-box:active {
    box-shadow: 0 5px 5px -3px rgba(0, 0, 0, 0.2),
                0 8px 10px 1px rgba(0, 0, 0, 0.14),
                0 3px 14px 2px rgba(0, 0, 0, 0.12);
}

.example-list {
    width: 50vw;
    max-width: 100%;
    border: solid 1px #ccc;
    min-height: 60px;
    display: block;
    background: white;
    border-radius: 4px;
    overflow: hidden;
    margin: auto;
}

.cdk-drag-preview {
    box-sizing: border-box;
    border-radius: 4px;
    box-shadow: 0 5px 5px -3px rgba(0, 0, 0, 0.2),
                0 8px 10px 1px rgba(0, 0, 0, 0.14),
                0 3px 14px 2px rgba(0, 0, 0, 0.12);
}
  
.cdk-drag-placeholder {
    opacity: 0;
}
  
.cdk-drag-animating {
    transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);
}
  
.example-box:last-child {
    border: none;
}
  
.example-list.cdk-drop-list-dragging .example-box:not(.cdk-drag-placeholder) {
    transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);
}
  

